---
# tasks file for lustre_builder

- name: Ensure EPEL repository is enabled (RHEL family)
  ansible.builtin.package:
    name: epel-release
    state: present
  when: ansible_os_family == "RedHat"
  become: true # KEEP

- name: Enable CodeReady Builder (CRB) repository
  ansible.builtin.command:
    cmd: /usr/bin/crb enable
  become: true
  changed_when: false
  when: ansible_os_family == "RedHat"

- name: Install Lustre build dependencies
  ansible.builtin.package:
    name:
      # Common dependencies
      - automake
      - bc
      - binutils-devel
      - bison
      - elfutils-devel
      - elfutils-libelf-devel
      - expect
      - flex
      - gcc
      - gcc-c++
      - git
      - glib2
      - glib2-devel
      - hmaccalc
      - krb5-devel
      - libattr-devel
      - libblkid-devel
      - libselinux-devel
      - libtool
      - libuuid-devel
      - libyaml-devel
      - lsscsi
      - make
      - ncurses-devel
      - net-snmp-devel
      - net-tools
      - patchutils
      - pciutils-devel
      - perl-ExtUtils-MakeMaker # Changed from perl-ExtUtils-Embed
      - pesign
      - python3-devel
      - rpm-build
      - systemd-devel
      - tcl
      - tcl-devel
      - tk
      - tk-devel
      - wget
      - xmlto
      - asciidoc
      - zlib-devel
      - kernel-devel
      # RHEL/CentOS/AlmaLinux specific
      - redhat-rpm-config
      - yum-utils
      - openmpi-devel
      - libnl3-devel
      - kernel-abi-stablelists
      - kernel-rpm-macros
    state: present
    update_cache: true
  become: true # KEEP
  when: not skip_build_and_sign | default(false)

- name: Ensure base source directory exists
  ansible.builtin.file:
    path: "{{ lustre_src_path }}"
    state: directory
    mode: '0755'
  # become: true # REMOVED as per instruction

- name: Clone Lustre source code repository
  ansible.builtin.git:
    repo: https://github.com/lustre/lustre-release.git
    dest: "{{ lustre_checkout_path }}"
    version: "{{ lustre_version }}"
    accept_hostkey: true
    force: true
  # become: true # REMOVED as per instruction

- name: Ensure RPM output directory exists
  ansible.builtin.file:
    path: "{{ lustre_version_rpm_path }}"
    state: directory
    mode: '0755'
  # become: true # REMOVED as per instruction

- name: Stat RPM output directory for idempotency check
  ansible.builtin.stat:
    path: "{{ lustre_version_rpm_path }}"
  register: lustre_version_rpm_path_stat

- name: Check for existing RPMs in destination (for idempotency)
  ansible.builtin.find:
    paths: "{{ lustre_version_rpm_path }}"
    patterns: "*.rpm"
  register: existing_rpms_in_dest
  when: lustre_version_rpm_path_stat.stat.exists and lustre_version_rpm_path_stat.stat.isdir

- name: Initialize skip_build_and_sign fact
  ansible.builtin.set_fact:
    skip_build_and_sign: false

    # --- Advanced Idempotency Checks (continued) ---
    # These tasks determine if a build/signing can be skipped if RPMs already exist and are correctly signed.

    - name: Initialize _rpms_are_signed_check_passed fact
      ansible.builtin.set_fact:
        _rpms_are_signed_check_passed: false # Default to false, only set true if all checks pass

    - name: Check signature status of existing RPMs if signing is enabled
      ansible.builtin.command: "rpm --checksig {{ item.path }}"
      loop: "{{ existing_rpms_in_dest.files }}"
      register: existing_rpm_sig_check_results
      when:
        - lustre_sign_rpms | bool
        - existing_rpms_in_dest.files is defined # Avoid error if find returned no files
        - existing_rpms_in_dest.files | length > 0
      changed_when: false
      failed_when: false # Don't fail the play, just check results

    - name: Determine if all existing RPMs are signed
      ansible.builtin.set_fact:
        _rpms_are_signed_check_passed: >-
          {% set all_good = true %} {# Assume true initially only if loop runs #}
          {% if existing_rpm_sig_check_results.results is defined %}
            {% for result in existing_rpm_sig_check_results.results %}
              {% if result.rc != 0 %} {# rpm --checksig returns 0 for a valid signature, even if key is unknown #}
                {% set all_good = false %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% else %}
            {# This block means the loop didn't run (no RPMs or check_results undefined)
               If there were no RPMs to check, they can't all be "signed and ok".
               However, this task only runs if RPMs *were* found.
               So, if results are undefined here, it's an unexpected state or no items looped.
               Effectively, if loop was empty or results not there, not all are signed. #}
            {% set all_good = false %}
          {% endif %}
          {{ all_good }}
      when:
        - lustre_sign_rpms | bool
        - existing_rpms_in_dest.files is defined
        - existing_rpms_in_dest.files | length > 0
        # Only run if the previous signature check task actually ran and produced results.
        - existing_rpm_sig_check_results.results is defined

    - name: Set final skip_build_and_sign decision
      ansible.builtin.set_fact:
        skip_build_and_sign: >-
          {% if existing_rpms_in_dest.files is defined and existing_rpms_in_dest.files | length > 0 %} {# If RPMs exist in destination #}
            {% if lustre_sign_rpms | bool %} {# And we are supposed to sign them #}
              {{ _rpms_are_signed_check_passed | default(false) }} {# Then skip only if they are already signed #}
            {% else %} {# RPMs exist, and we are NOT supposed to sign them #}
              true {# So, skip building (they are already there) #}
            {% endif %}
          {% else %} {# No RPMs exist in destination #}
            false {# So, do not skip, we need to build them #}
          {% endif %}

    # This is a debug task, can be removed or commented out later
    - name: Display idempotency skip decision
      ansible.builtin.debug:
        var: skip_build_and_sign

- name: Run autogen.sh for Lustre
  ansible.builtin.shell:
    cmd: sh autogen.sh
    chdir: "{{ lustre_checkout_path }}"
    creates: "{{ lustre_checkout_path }}/configure"
  environment:
    PATH: "/usr/lib64/openmpi/bin:{{ ansible_env.PATH }}"
  # become: true # REMOVED as per instruction
  when: not skip_build_and_sign | default(false)

- name: Run configure for Lustre
  ansible.builtin.command:
    cmd: ./configure --enable-client
    chdir: "{{ lustre_checkout_path }}"
    creates: "{{ lustre_checkout_path }}/Makefile"
  environment:
    PATH: "/usr/lib64/openmpi/bin:{{ ansible_env.PATH }}"
  # become: true # REMOVED as per instruction
  when: not skip_build_and_sign | default(false)

- name: Build Lustre RPMs
  ansible.builtin.command:
    cmd: make rpms
    chdir: "{{ lustre_checkout_path }}"
  environment:
    PATH: "/usr/lib64/openmpi/bin:{{ ansible_env.PATH }}"
  # become: true # REMOVED as per instruction
  when: not skip_build_and_sign | default(false)

- name: Find generated RPMs
  ansible.builtin.find:
    paths: "{{ lustre_checkout_path }}"
    patterns: "*.rpm"
    recurse: yes
  register: found_rpms
  # become: true # REMOVED as per instruction
  when: not skip_build_and_sign | default(false)

- name: Move compiled RPMs to destination directory
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ lustre_version_rpm_path }}/"
    remote_src: true
    mode: '0644'
  loop: "{{ found_rpms.files }}"
  when: found_rpms.files | length > 0 and not skip_build_and_sign | default(false)
  # become: true # REMOVED as per instruction

- name: Ensure signing utilities are installed (rpm-sign, gnupg)
  ansible.builtin.package:
    name:
      - rpm-sign
      - gnupg
    state: present
  when: lustre_sign_rpms | bool and lustre_gpg_key_name | length > 0 and not skip_build_and_sign | default(false) # Updated variable name
  become: true # KEEP

# --- GPG Key Generation (Optional) ---
- name: Check if specified GPG key exists
  ansible.builtin.command: "gpg --list-keys \"{{ lustre_gpg_key_name }}\""
  register: gpg_key_check
  failed_when: false
  changed_when: false
  no_log: true # gpg --list-keys is generally safe, but good practice if key_name could be sensitive
  when:
    - lustre_sign_rpms | bool
    - lustre_gpg_key_name | length > 0
    - lustre_generate_gpg_key_if_missing | bool
    - not (skip_build_and_sign | default(false))
  environment: "{{ { 'GNUPGHOME': lustre_gpg_home } if lustre_gpg_home | length > 0 else {} }}"

- name: Create temporary file for GPG batch parameters
  ansible.builtin.tempfile:
    state: file
    suffix: gpg_batch_params
  register: gpg_param_tempfile
  when:
    - lustre_sign_rpms | bool
    - lustre_gpg_key_name | length > 0
    - lustre_generate_gpg_key_if_missing | bool
    - gpg_key_check.rc != 0  # Key does not exist
    - not (skip_build_and_sign | default(false))

- name: Create GPG parameter file for key generation
  ansible.builtin.copy:
    content: |
      %echo Generating a GPG key
      Key-Type: {{ lustre_gpg_key_type }}
      Key-Length: {{ lustre_gpg_key_length }}
      Subkey-Type: ELG-E
      Subkey-Length: {{ lustre_gpg_key_length }}
      Name-Real: {{ lustre_gpg_real_name }}
      Name-Comment: {{ lustre_gpg_comment }}
      Name-Email: {{ lustre_gpg_email }}
      Expire-Date: {{ lustre_gpg_key_expire_date }}
      Passphrase: {{ (lustre_gpg_passphrase_file | length > 0) | ternary(lookup('file', lustre_gpg_passphrase_file), (lustre_gpg_passphrase if lustre_gpg_passphrase is defined and lustre_gpg_passphrase | length > 0 else "")) }}
      %commit
      %echo done
    dest: "{{ gpg_param_tempfile.path }}"
    mode: '0600'
  when:
    - lustre_sign_rpms | bool
    - lustre_gpg_key_name | length > 0
    - lustre_generate_gpg_key_if_missing | bool
    - gpg_key_check.rc != 0  # Key does not exist
    - gpg_param_tempfile.path is defined
    - not (skip_build_and_sign | default(false))

- name: Generate GPG key pair
  ansible.builtin.command: "gpg --batch --full-generate-key --debug-quick-random {{ gpg_param_tempfile.path }}"
  register: gpg_generate_result
  changed_when: gpg_generate_result.rc == 0
  when:
    - lustre_sign_rpms | bool
    - lustre_gpg_key_name | length > 0
    - lustre_generate_gpg_key_if_missing | bool
    - gpg_key_check.rc != 0  # Key does not exist
    - gpg_param_tempfile.path is defined
    - not (skip_build_and_sign | default(false))
  environment: "{{ { 'GNUPGHOME': lustre_gpg_home } if lustre_gpg_home | length > 0 else {} }}"
  # no_log: true # Consider if output of gpg command could be sensitive

- name: Remove GPG parameter file
  ansible.builtin.file:
    path: "{{ gpg_param_tempfile.path }}"
    state: absent
  when:
    - gpg_param_tempfile.path is defined # Ensure it was actually created
    - lustre_sign_rpms | bool # Only relevant if signing and generation was attempted
    - lustre_generate_gpg_key_if_missing | bool
    - gpg_key_check.rc != 0 # Only if key generation was attempted because key was missing
    - not (skip_build_and_sign | default(false))
    # This task ensures the parameter file is cleaned up immediately after use,
    # especially if the playbook might exit before tempfile module's default cleanup.

# --- RPM Signing using rpmsign ---
- name: Find RPMs in the versioned RPM path for signing
  ansible.builtin.find:
    paths:
      - "{{ lustre_version_rpm_path }}"
    patterns: "*.rpm"
  register: rpms_to_sign_list
  when: lustre_sign_rpms | bool and lustre_gpg_key_name | length > 0 and not skip_build_and_sign | default(false)

- name: Create temporary GPG passphrase file
  ansible.builtin.tempfile:
    state: file
    suffix: gpg_passphrase
  register: gpg_passphrase_tempfile
  when:
    - lustre_sign_rpms | bool
    - lustre_gpg_key_name | length > 0
    - rpms_to_sign_list.files is defined # Check if find returned anything
    - rpms_to_sign_list.files | length > 0
    - ((lustre_gpg_passphrase_file | length > 0) or (lustre_gpg_passphrase is defined and lustre_gpg_passphrase | length > 0))
    - not (skip_build_and_sign | default(false))

- name: Populate temporary GPG passphrase file
  ansible.builtin.copy:
    content: "{{ lookup('file', lustre_gpg_passphrase_file) if lustre_gpg_passphrase_file | length > 0 else (lustre_gpg_passphrase if lustre_gpg_passphrase is defined else '') }}"
    dest: "{{ gpg_passphrase_tempfile.path }}"
    mode: '0400' # Correct YAML representation for octal mode
  no_log: true # Avoids logging passphrase if it came from direct var
  when:
    - lustre_sign_rpms | bool # Redundant due to tempfile condition, but safe
    - gpg_passphrase_tempfile.path is defined # Ensure tempfile was created
    - not (skip_build_and_sign | default(false))

- name: Sign Lustre RPMs using rpmsign
  ansible.builtin.command: "bash -c \"{% if gpg_passphrase_tempfile.path is defined and gpg_passphrase_tempfile.path | length > 0 %}exec 3< {{ gpg_passphrase_tempfile.path | quote }};{% else %}exec 3< /dev/null;{% endif %} rpmsign --define '_gpg_name {{ lustre_gpg_key_name }}' --define '_signature %{_gpg_name}' --define '__gpg_sign_cmd %{__gpg} gpg --pinentry-mode loopback --force-v3-sigs --batch --verbose --no-armor {{ (gpg_passphrase_tempfile.path is defined and gpg_passphrase_tempfile.path | length > 0) | ternary('--passphrase-fd 3', '') }} --no-secmem-warning -u %{_gpg_name} -sbo %{__signature_filename} %{__plaintext_filename}' --resign {{ item.path | quote }}\""
  loop: "{{ rpms_to_sign_list.files }}"
  register: rpm_sign_result
  changed_when: rpm_sign_result.rc == 0
  when:
    - lustre_sign_rpms | bool
    - lustre_gpg_key_name | length > 0
    - rpms_to_sign_list.files is defined
    - rpms_to_sign_list.files | length > 0
    - not (skip_build_and_sign | default(false))
  environment: "{{ { 'GNUPGHOME': lustre_gpg_home } if lustre_gpg_home | length > 0 else {} }}"

- name: Remove temporary GPG passphrase file
  ansible.builtin.file:
    path: "{{ gpg_passphrase_tempfile.path }}"
    state: absent
  when:
    - gpg_passphrase_tempfile.path is defined
    - not (skip_build_and_sign | default(false))

- name: Add OpenMPI to PATH in .bashrc if not already present
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    block: |
      # Add OpenMPI to PATH
      if [[ ":$PATH:" != *":/usr/lib64/openmpi/bin:"* ]]; then
        export PATH="/usr/lib64/openmpi/bin:$PATH"
      fi
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR OPENMPI"
    create: true
    mode: '0644'
  # This task does NOT use become: true
  when: not skip_build_and_sign | default(false)
